generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(USER)
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Estimate Estimate[]
  projects Project[]
  tasks    Task[]

  // Relaciones a MaterialRequest
  requests  MaterialRequest[] @relation("Requester")
  approvals MaterialRequest[] @relation("Approver")
}

model Project {
  id              Int               @id @default(autoincrement())
  jobNumber       String
  name            String
  managerId       Int?
  startDate       DateTime?
  endDate         DateTime?
  status          ProjectStatus     @default(PLANNED)
  billings        Billing[]
  bondings        Bonding[]
  DailyTimeEntry  DailyTimeEntry[]
  documents       Document[]
  estimates       Estimate[]
  insurances      Insurance[]
  licenses        License[]
  manager         User?             @relation(fields: [managerId], references: [id])
  tasks           Task[]
  WeeklyTimecard  WeeklyTimecard[]
  MaterialRequest MaterialRequest[]
}

model Task {
  id           Int       @id @default(autoincrement())
  name         String
  assignedToId Int?
  dueDate      DateTime?
  projectId    Int
  assignedTo   User?     @relation(fields: [assignedToId], references: [id])
  project      Project   @relation(fields: [projectId], references: [id])
}

model Estimate {
  id          Int            @id @default(autoincrement())
  projectId   Int
  estimatorId Int?
  amount      Float
  createdAt   DateTime       @default(now())
  status      EstimateStatus
  estimator   User?          @relation(fields: [estimatorId], references: [id])
  project     Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Billing {
  id        Int       @id @default(autoincrement())
  projectId Int
  dueDate   DateTime?
  amount    Float
  issuedAt  DateTime  @default(now())
  paid      Boolean   @default(false)
  project   Project   @relation(fields: [projectId], references: [id])
}

model Employee {
  id               Int                      @id @default(autoincrement())
  firstName        String
  lastName         String
  address          String?
  city             String?
  dailyTimeEntries DailyTimeEntry[]
  classifications  EmployeeClassification[]
  payrolls         Payroll[]
  weeklyTimecards  WeeklyTimecard[]
}

model Classification {
  id              Int                      @id @default(autoincrement())
  name            String
  craftCode       String
  payRate         Float
  effectiveDate   DateTime
  employeeHistory EmployeeClassification[]
}

model EmployeeClassification {
  id               Int            @id @default(autoincrement())
  employeeId       Int
  classificationId Int
  startDate        DateTime
  endDate          DateTime?
  classification   Classification @relation(fields: [classificationId], references: [id])
  employee         Employee       @relation(fields: [employeeId], references: [id])
}

model DailyTimeEntry {
  id            Int      @id @default(autoincrement())
  employeeId    Int
  projectId     Int
  workDate      DateTime
  hoursWorked   Float
  overtimeHours Float?
  employee      Employee @relation(fields: [employeeId], references: [id])
  project       Project  @relation(fields: [projectId], references: [id])
}

model WeeklyTimecard {
  id            Int      @id @default(autoincrement())
  employeeId    Int
  projectId     Int
  weekStartDate DateTime
  notes         String?
  employee      Employee @relation(fields: [employeeId], references: [id])
  project       Project  @relation(fields: [projectId], references: [id])
}

model Payroll {
  id          Int      @id @default(autoincrement())
  employeeId  Int
  periodStart DateTime
  periodEnd   DateTime
  totalHours  Float
  grossPay    Float
  deductions  Float
  netPay      Float
  createdAt   DateTime @default(now())
  employee    Employee @relation(fields: [employeeId], references: [id])
}

model Bonding {
  id        Int      @id @default(autoincrement())
  projectId Int
  provider  String
  amount    Float
  startDate DateTime
  endDate   DateTime
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Insurance {
  id           Int      @id @default(autoincrement())
  projectId    Int
  provider     String
  policyNumber String
  coverage     String
  startDate    DateTime
  endDate      DateTime
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model License {
  id        Int      @id @default(autoincrement())
  projectId Int
  type      String
  number    String
  issuedBy  String
  validFrom DateTime
  validTo   DateTime
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Document {
  id         Int      @id @default(autoincrement())
  projectId  Int
  name       String
  url        String
  uploadedAt DateTime @default(now())
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model MaterialRequest {
  id          Int            @id @default(autoincrement())
  projectId   Int
  material    String
  quantity    Float
  status      MaterialStatus @default(PENDING)
  requestedBy Int
  approvedBy  Int?

  requestedAt DateTime  @default(now())
  approvedAt  DateTime?

  project       Project         @relation(fields: [projectId], references: [id])
  requester     User            @relation("Requester", fields: [requestedBy], references: [id])
  approver      User?           @relation("Approver", fields: [approvedBy], references: [id])
  MaterialOrder MaterialOrder[]
}

model MaterialOrder {
  id              Int             @id @default(autoincrement())
  requestId       Int
  supplier        String
  orderDate       DateTime        @default(now())
  status          OrderStatus     @default(PENDING)
  materialRequest MaterialRequest @relation(fields: [requestId], references: [id])
  Delivery        Delivery[]
}

model Delivery {
  id               Int            @id @default(autoincrement())
  orderId          Int
  deliveredAt      DateTime?
  quantityReceived Float
  status           DeliveryStatus @default(PENDING)
  materialOrder    MaterialOrder  @relation(fields: [orderId], references: [id])
}

enum DeliveryStatus {
  PENDING
  RECEIVED
  PARTIAL
  DAMAGED
}

enum OrderStatus {
  PENDING
  ORDERED
  IN_TRANSIT
  DELIVERED
}

enum MaterialStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Role {
  ADMIN
  OWNER
  PROJECT_MANAGER
  ESTIMATOR
  BILLING
  PAYROLL
  USER
}

enum EstimateStatus {
  IN_PROGRESS
  SUBMITTED
  AWARDED
  REJECTED
  DRAFT
}

enum ProjectStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}
