generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int               @id @default(autoincrement())
  email     String            @unique
  password  String
  role      Role              @default(USER)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  name      String
  active    Boolean           @default(true)
  Estimate  Estimate[]
  approvals MaterialRequest[] @relation("Approver")
  requests  MaterialRequest[] @relation("Requester")
  projects  Project[]
  tasks     Task[]
}

model Project {
  id              Int               @id @default(autoincrement())
  name            String
  startDate       DateTime?
  endDate         DateTime?
  jobNumber       String
  managerId       Int?
  status          ProjectStatus     @default(PLANNED)
  billings        Billing[]
  bondings        Bonding[]
  DailyTimeEntry  DailyTimeEntry[]
  documents       Document[]
  estimates       Estimate[]
  insurances      Insurance[]
  licenses        License[]
  MaterialRequest MaterialRequest[]
  manager         User?             @relation(fields: [managerId], references: [id])
  tasks           Task[]
  WeeklyTimecard  WeeklyTimecard[]
}

model Task {
  id           Int       @id @default(autoincrement())
  projectId    Int
  name         String
  assignedToId Int?
  dueDate      DateTime?
  assignedTo   User?     @relation(fields: [assignedToId], references: [id])
  project      Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Estimate {
  id          Int            @id @default(autoincrement())
  projectId   Int
  amount      Float
  createdAt   DateTime       @default(now())
  estimatorId Int?
  status      EstimateStatus
  estimator   User?          @relation(fields: [estimatorId], references: [id])
  project     Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Billing {
  id            Int       @id @default(autoincrement())
  projectId     Int
  amount        Float
  createdAt     DateTime  @default(now())
  dueDate       DateTime?
  issuedAt      DateTime  @default(now())
  invoiceNumber String    @unique
  paid          Boolean   @default(false)
  project       Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Employee {
  id               Int                      @id @default(autoincrement())
  firstName        String
  lastName         String
  address          String?
  city             String?
  dailyTimeEntries DailyTimeEntry[]
  classifications  EmployeeClassification[]
  payrolls         Payroll[]
  weeklyTimecards  WeeklyTimecard[]
}

model Classification {
  id              Int                      @id @default(autoincrement())
  name            String
  craftCode       String
  payRate         Float
  effectiveDate   DateTime
  employeeHistory EmployeeClassification[]
}

model EmployeeClassification {
  id               Int            @id @default(autoincrement())
  classificationId Int
  employeeId       Int
  endDate          DateTime?
  startDate        DateTime
  classification   Classification @relation(fields: [classificationId], references: [id])
  employee         Employee       @relation(fields: [employeeId], references: [id])
}

model DailyTimeEntry {
  id            Int      @id @default(autoincrement())
  employeeId    Int
  projectId     Int
  workDate      DateTime
  hoursWorked   Float
  overtimeHours Float?
  employee      Employee @relation(fields: [employeeId], references: [id])
  project       Project  @relation(fields: [projectId], references: [id])
}

model WeeklyTimecard {
  id            Int      @id @default(autoincrement())
  employeeId    Int
  projectId     Int
  notes         String?
  weekStartDate DateTime
  employee      Employee @relation(fields: [employeeId], references: [id])
  project       Project  @relation(fields: [projectId], references: [id])
}

model Payroll {
  id          Int      @id @default(autoincrement())
  employeeId  Int
  createdAt   DateTime @default(now())
  deductions  Float
  grossPay    Float
  netPay      Float
  periodEnd   DateTime
  periodStart DateTime
  totalHours  Float
  employee    Employee @relation(fields: [employeeId], references: [id])
}

model Bonding {
  id        Int      @id @default(autoincrement())
  projectId Int
  amount    Float
  createdAt DateTime @default(now())
  endDate   DateTime
  provider  String
  startDate DateTime
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Insurance {
  id           Int      @id @default(autoincrement())
  projectId    Int
  coverage     String
  createdAt    DateTime @default(now())
  endDate      DateTime
  policyNumber String
  provider     String
  startDate    DateTime
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model License {
  id        Int      @id @default(autoincrement())
  projectId Int
  createdAt DateTime @default(now())
  issuedBy  String
  number    String
  type      String
  validFrom DateTime
  validTo   DateTime
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Document {
  id         Int      @id @default(autoincrement())
  projectId  Int
  name       String
  url        String
  uploadedAt DateTime @default(now())
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model MaterialRequest {
  id            Int             @id @default(autoincrement())
  projectId     Int
  material      String
  quantity      Float
  status        MaterialStatus  @default(PENDING)
  requestedBy   Int
  approvedBy    Int?
  requestedAt   DateTime        @default(now())
  approvedAt    DateTime?
  MaterialOrder MaterialOrder[]
  approver      User?           @relation("Approver", fields: [approvedBy], references: [id])
  project       Project         @relation(fields: [projectId], references: [id])
  requester     User            @relation("Requester", fields: [requestedBy], references: [id])
}

model MaterialOrder {
  id               Int             @id @default(autoincrement())
  requestId        Int
  supplier         String
  orderDate        DateTime        @default(now())
  status           OrderStatus     @default(PENDING)
  description      String?
  quantity         Float?
  unitPrice        Float?
  totalAmount      Float?
  submittedAt      DateTime?
  approvedAt       DateTime?
  orderedAt        DateTime?
  expectedDelivery DateTime?
  notes            String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  Delivery         Delivery[]
  materialRequest  MaterialRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
}

model Delivery {
  id               Int            @id @default(autoincrement())
  deliveredAt      DateTime?
  orderId          Int
  quantityReceived Float
  status           DeliveryStatus @default(PENDING)
  materialOrder    MaterialOrder  @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

enum DeliveryStatus {
  PENDING
  RECEIVED
  PARTIAL
  DAMAGED
}

enum OrderStatus {
  PENDING
  ORDERED
  IN_TRANSIT
  DELIVERED
}

enum MaterialStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Role {
  ADMIN
  USER
  PROJECT_MANAGER
  OWNER
  ESTIMATOR
  BILLING
  PAYROLL
}

enum EstimateStatus {
  IN_PROGRESS
  SUBMITTED
  AWARDED
  REJECTED
  DRAFT
}

enum ProjectStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}
