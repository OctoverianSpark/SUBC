// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==== ENUMS ====
enum Role {
  ADMIN
  OWNER
  PROJECT_MANAGER
  ESTIMATOR
  BILLING
  PAYROLL
  USER
}

enum EmployeeLevel {
  APPRENTICE
  JOURNEYMAN
  FOREMAN
  SUPERINTENDENT
}

enum OrderStatus {
  SUBMITTED
  APPROVED
  ORDERED
  SCHEDULED
  DELIVERED_TO_OFFICE
  DELIVERED_TO_SITE
}

enum ProjectRole {
  WORKER
  SUPERVISOR
  MANAGER
}

enum ProjectStatusEnum {
  PLANNED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELLED
}

// ==== USERS ====
model User {
  id        Int      @id @default(autoincrement())
  name      String?
  email     String   @unique
  password  String
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relación: Deliveries solicitadas por este usuario
  requestedDeliveries Delivery[] @relation("RequestedBy")

  // Relación: Deliveries donde este usuario es el driver
  driverDeliveries Delivery[] @relation("Driver")

  // Relación con empleados (cascade delete: cuando se borra el usuario, el empleado queda sin usuario pero no se borra)
  Employee Employee[]

  // Relación con Deliveries creados (cascade delete)
  Delivery          Delivery[]
  Estimate          Estimate[]
  Task              Task[]
  EstimatorExternal EstimatorExternal[]
}

// ==== EMPLOYEES ====
model Employee {
  id               Int                    @id @default(autoincrement())
  firstName        String
  lastName         String
  email            String?                @unique
  phone            String?
  classificationId Int
  classification   EmployeeClassification @relation(fields: [classificationId], references: [id], onDelete: Restrict)
  levelId          Int
  level            EmployeeLevelModel     @relation(fields: [levelId], references: [id], onDelete: Restrict)
  hireDate         DateTime?
  active           Boolean                @default(true)

  // Enriquecidos desde Excel
  address         String?
  city            String?
  state           String?
  zip             String?
  terminationDate DateTime?

  // Relación con entregas (cascade delete)
  deliveries Delivery[]

  // Relación con usuario (set null when user is deleted)
  user   User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId Int?

  // Relación con proyectos (asignaciones) - cascade delete
  projectAssignments EmployeeProjectAssignment[]

  // Timesheets - cascade delete
  dailyTimeEntries DailyTimeEntry[]
  weeklyTimecards  WeeklyTimecard[]

  // Historial de clasificación - cascade delete
  classHistory EmployeeClassHistory[]
  Payroll      Payroll[]
}

model EmployeeClassification {
  id          Int                    @id @default(autoincrement())
  name        String
  description String?
  employees   Employee[]
  history     EmployeeClassHistory[]
}

model EmployeeLevelModel {
  id        Int        @id @default(autoincrement())
  name      String
  employees Employee[]
}

// ==== PROJECTS & CONTRACTS ====
model Project {
  id        Int               @id @default(autoincrement())
  jobNumber String            @unique
  name      String
  client    String
  startDate DateTime?
  endDate   DateTime?
  status    ProjectStatusEnum @default(PLANNED)

  // Relaciones 1:1 con deadlines - cascade delete
  contract  Contract?
  bonding   Bonding?
  insurance Insurance?
  license   License?

  // Relaciones 1:N - cascade delete
  estimates        Estimate[]
  billings         Billing[]
  materials        MaterialOrder[]
  CertifiedPayroll CertifiedPayroll[]
  documents        Document[]
  payrolls         Payroll[]

  // Relación con empleados (asignaciones) - cascade delete
  employeeAssignments EmployeeProjectAssignment[]
  Task                Task[]
  DailyTimeEntry      DailyTimeEntry[]
  WeeklyTimecard      WeeklyTimecard[]
  MonthlyBilling      MonthlyBilling[]

  // Set null when status reference is deleted
  ProjectStatusRef   ProjectStatusRef? @relation(fields: [projectStatusRefId], references: [id], onDelete: SetNull)
  projectStatusRefId Int?
}

// ==== BONDING ====
model Bonding {
  id        Int       @id @default(autoincrement())
  projectId Int       @unique
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  deadline  DateTime?
}

// ==== INSURANCE ====
model Insurance {
  id        Int       @id @default(autoincrement())
  projectId Int       @unique
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  deadline  DateTime?
}

// ==== LICENSE ====
model License {
  id        Int       @id @default(autoincrement())
  projectId Int       @unique
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  deadline  DateTime?
}

// ==== PAYROLL ====
model Payroll {
  id         Int      @id @default(autoincrement())
  projectId  Int
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  employeeId Int
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  amount     Float
  weekStart  DateTime
  weekEnd    DateTime
}

// ==== DOCUMENTS ====
model Document {
  id         Int      @id @default(autoincrement())
  projectId  Int
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  name       String
  type       String
  url        String
  uploadedAt DateTime @default(now())
}

model Contract {
  id                Int       @id @default(autoincrement())
  projectId         Int       @unique
  project           Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  bondingDeadline   DateTime?
  insuranceDeadline DateTime?
  licenseDeadline   DateTime?
  payrollDeadline   DateTime?
  materialsDeadline DateTime?
}

// Tabla intermedia para asignar empleados a proyectos
model EmployeeProjectAssignment {
  id         Int         @id @default(autoincrement())
  employeeId Int
  projectId  Int
  role       ProjectRole @default(WORKER)
  assignedAt DateTime    @default(now())

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  project  Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([employeeId, projectId]) // evita duplicados
}

// ==== ESTIMATES ====
model Estimate {
  id          Int      @id @default(autoincrement())
  projectId   Int
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  description String
  amount      Float
  createdAt   DateTime @default(now())

  // Enriquecidos (tblEstimates/tblEstimators/tblEstimateStatus)
  estimatorId Int?
  estimator   User?              @relation(fields: [estimatorId], references: [id], onDelete: SetNull)
  status      String?
  notes       String?
  statusRefId Int?
  statusRef   EstimateStatusRef? @relation(fields: [statusRefId], references: [id], onDelete: SetNull)
}

// ==== BILLING ====
model Billing {
  id        Int      @id @default(autoincrement())
  projectId Int
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  period    String
  amount    Float
  createdAt DateTime @default(now())

  // Enriquecidos (tblBilling)
  invoiceNumber String?
  dueDate       DateTime?
  notes         String?
}

// ==== CERTIFIED PAYROLL ====
model CertifiedPayroll {
  id        Int      @id @default(autoincrement())
  projectId Int
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  weekStart DateTime
  weekEnd   DateTime
  createdAt DateTime @default(now())
}

// ==== MATERIAL ORDERS ====
model MaterialOrder {
  id          Int         @id @default(autoincrement())
  projectId   Int
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  description String
  status      OrderStatus @default(SUBMITTED)
  submittedAt DateTime? // fecha submittal
  approvedAt  DateTime? // aprobación GC
  orderedAt   DateTime? // fecha ordenado
  officeETA   DateTime? // fecha entrega oficina
  siteETA     DateTime? // fecha entrega sitio
  deliveries  Delivery[]
}

// ==== DELIVERIES ====
model Delivery {
  id              Int           @id @default(autoincrement())
  materialOrder   MaterialOrder @relation(fields: [materialOrderId], references: [id], onDelete: Cascade)
  materialOrderId Int

  requestedBy   User @relation("RequestedBy", fields: [requestedById], references: [id], onDelete: Restrict)
  requestedById Int

  driver   User @relation("Driver", fields: [driverId], references: [id], onDelete: Restrict)
  driverId Int

  vehicle   Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Restrict)
  vehicleId Int

  scheduledDate DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relación con usuario creador (set null when user is deleted)
  User   User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId Int?

  // Relación con empleado (set null when employee is deleted)
  Employee   Employee? @relation(fields: [employeeId], references: [id], onDelete: SetNull)
  employeeId Int?
}

// ==== VEHICLES ====
model Vehicle {
  id        Int      @id @default(autoincrement())
  plate     String   @unique
  model     String
  capacity  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deliveries Delivery[]
}

// ==== NUEVOS MODELOS DESDE EXCEL ====

// TAREAS (tblTasks)
model Task {
  id        Int     @id @default(autoincrement())
  projectId Int
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  name           String // TaskName
  assignedToId   Int? // AssignedTo -> User.id (si aplica)
  assignedTo     User?     @relation(fields: [assignedToId], references: [id], onDelete: SetNull)
  assignedAt     DateTime? // TaskDateAssigned
  dueDate        DateTime? // DueDate
  status         String? // Status (texto)
  completionDate DateTime? // CompletionDate
  notes          String? // Notes
}

// PARTES DIARIAS (tblDailyTimeEntries)
model DailyTimeEntry {
  id            Int      @id @default(autoincrement())
  employeeId    Int
  projectId     Int
  workDate      DateTime
  hoursWorked   Float
  overtimeHours Float?
  notes         String?

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  project  Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

// TARJETA SEMANAL (tblWeeklyTimecards)
model WeeklyTimecard {
  id         Int      @id @default(autoincrement())
  employeeId Int
  projectId  Int
  weekStart  DateTime // WeekStartDate
  totalHours Float?
  notes      String?

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  project  Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

// AGREGADOS MENSUALES (tblMonthlyBilling)
model MonthlyBilling {
  id        Int   @id @default(autoincrement())
  year      Int
  month     Int
  projectId Int
  amount    Float

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, year, month])
}

// HISTORIAL DE CLASIFICACIÓN (tblEmployeeClassHistory)
model EmployeeClassHistory {
  id               Int       @id @default(autoincrement())
  employeeId       Int
  classificationId Int
  startDate        DateTime
  endDate          DateTime?
  reason           String?

  employee       Employee               @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  classification EmployeeClassification @relation(fields: [classificationId], references: [id], onDelete: Restrict)
}

// CATÁLOGO INFORMATIVO DE ESTADO DE PROYECTO (no reemplaza enums)
model ProjectStatusRef {
  id          Int       @id @default(autoincrement())
  code        String    @unique // p.ej. "IN_PROGRESS"
  name        String
  description String?
  projects    Project[]
}

// CATÁLOGO INFORMATIVO DE ESTADO DE ESTIMATE (no reemplaza enums)
model EstimateStatusRef {
  id          Int        @id @default(autoincrement())
  code        String     @unique // p.ej. "SUBMITTED"
  name        String
  description String?
  estimates   Estimate[]
}

// STAGING OPCIONAL: ESTIMADORES EXTERNOS (tblEstimators)
model EstimatorExternal {
  id     Int     @id @default(autoincrement())
  name   String?
  email  String? @unique
  userId Int?

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
}
